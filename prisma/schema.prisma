// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EntityStatus {
  Saved
  Submitted
  Accepted
}

model Admin {
  id       Int    @id @default(autoincrement())
  account  String @unique @db.VarChar(255)
  password String @db.VarChar(255)
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  abstracts  Abstract[]
  arriveInfo ArriveInfo[]
}

enum AbstractType {
  Talk
  Post
}

model Abstract {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      EntityStatus
  type        AbstractType
  title       String       @db.Text()
  content     String       @db.Text()
  attachments Attachment[]
  authors      Author[]
}

model ArriveInfo {
  id            Int          @id @default(autoincrement())
  status        EntityStatus
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  dontPickUp    Boolean
  contactName   String       @db.VarChar(255)
  telephone     String       @db.VarChar(255)
  email         String       @db.VarChar(255)
  groupNumber   Int
  arriveStation String       @db.VarChar(255)
  arriveAt      DateTime     @db.DateTime()
}

model Author {
  id                  Int      @id @default(autoincrement())
  abstractId          Int
  abstract            Abstract @relation(fields: [abstractId], references: [id], onDelete: Cascade)
  authorName          String   @db.VarChar(255)
  email               String   @db.VarChar(255)
  region              String   @db.VarChar(255)
  staff               String   @db.VarChar(255)
  speaker             Boolean
  correspondingAuthor Boolean
}

model Attachment {
  id         Int      @id @default(autoincrement())
  abstractId Int
  abstract   Abstract @relation(fields: [abstractId], references: [id], onDelete: Cascade)
  filename   String   @db.VarChar(255)
  size       Int
  fsname     String   @unique @db.VarChar(255)

  @@unique([abstractId, filename])
}
